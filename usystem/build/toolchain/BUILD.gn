
sys_root = getenv("SYSROOT")

template("base_toolchain") {
  toolchain(target_name) {

  forward_variables_from(invoker, "*", ["output_dir"])
  default_output_dir = "{{target_out_dir}}"

  tool("cc") {
    depfile = "{{output}}.d"
    command = "$cc --sysroot=$sys_root -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} -c {{source}} -o {{output}}"
    depsformat = "gcc"
    description = "CC {{output}}"
    outputs =
        [ "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o" ]
  }

  tool("cxx") {
    depfile = "{{output}}.d"
    command = "$cxx --sysroot=$sys_root -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}} -c {{source}} -o {{output}}"
    depsformat = "gcc"
    description = "CXX {{output}}"
    outputs =
        [ "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o" ]
  }

  tool("alink") {
    command = "rm -f {{output}} && $ar rcs {{output}} {{inputs}}"
    description = "AR {{target_output_name}}{{output_extension}}"
    outputs =
        [ "{{target_out_dir}}/{{target_output_name}}{{output_extension}}" ]
    default_output_extension = ".a"
    output_prefix = "lib"
  }

  tool("solink") {
    soname = "{{target_output_name}}{{output_extension}}"  # e.g. "libfoo.so".
    sofile = "{{output_dir}}/$soname"
    rspfile = soname + ".rsp"
    os_specific_option = "-Wl,-soname=$soname"
    rspfile_content = "-Wl,--whole-archive {{inputs}} {{solibs}} -Wl,--no-whole-archive {{libs}}"

    command = "$ld --sysroot=$sys_root -shared {{ldflags}} -o $sofile $os_specific_option @$rspfile"
    description = "SOLINK $soname"
    # Use this for {{output_extension}} expansions unless a target manually
    # overrides it (in which case {{output_extension}} will be what the target
    # specifies).
    default_output_extension = ".so"
    # Use this for {{output_dir}} expansions unless a target manually overrides
    # it (in which case {{output_dir}} will be what the target specifies).
    outputs = [ sofile ]
    link_output = sofile
    depend_output = sofile
    output_prefix = "lib"
  }

  tool("link") {
    outfile = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
    rspfile = "$outfile.rsp"
    command = "$ld --sysroot=$sys_root {{ldflags}} -o $outfile -Wl,--start-group @$rspfile {{solibs}} -Wl,--end-group {{libs}}"

    description = "LINK $outfile"
    rspfile_content = "{{inputs}}"
    outputs = [ outfile ]
  }

  tool("stamp") {
    command = "touch {{output}}"
    description = "STAMP {{output}}"
  }

  tool("copy") {
    command = "cp -af {{source}} {{output}}"
    description = "COPY {{source}} {{output}}"
  }

}
}

template("gcc_toolchain") {
  base_toolchain(target_name) {
    forward_variables_from(invoker, "*", ["output_dir"])
    toolprefix = "${gcc_target}-"
    cc = "${toolprefix}gcc"
    cxx = "${toolprefix}g++"

    ar = "${toolprefix}ar"
   #strip = "${toolprefix}strip"
    ld = cxx
  }
}

gcc_toolchain("x86_64-gcc") {
  gcc_target = "x86_64-onyx"
}

gcc_toolchain("riscv64-gcc") {
  gcc_target = "riscv64-onyx"
}

gcc_toolchain("aarch64-gcc") {
  gcc_target = "aarch64-onyx"
}

template("clang_toolchain") {
  base_toolchain(target_name) {
    forward_variables_from(invoker, "*", ["output_dir"])
    toolprefix = "${clang_path}/bin/"
    gcc_target = target_cpu
    if (target_cpu == "arm64") {
      gcc_target = "aarch64"
    }

    cc = "${toolprefix}clang --target=${gcc_target}-unknown-${target_os}"
    cxx = "${toolprefix}clang++ --target=${gcc_target}-unknown-${target_os}"

    ar = "${toolprefix}llvm-ar"
    #strip = "${toolprefix}llvm-strip"
    ld = cxx
  }
}

clang_toolchain("clang") {
  clang_path = clang_path
}
