#
# Copyright (c) 2021 Pedro Falcato
# This file is part of Onyx, and is released under the terms of the MIT License
# check LICENSE at the root directory for more information
#

import("//build/toolchain/base_system_toolchain.gni")
import("//build/sdk.gni")

if(current_toolchain == default_toolchain) {
  base_system_toolchain("kernel_toolchain") {

  }
}

if(base_system_toolchain != false) {

config("kernel_headers") {
  include_dirs = [
    "include",
    "include/acpica",
  ]
}

config("kernel_config") {
  defines = [
    "__is_onyx_kernel",
    "_POSIX_C_SOURCE",
    "_BSD_SOURCE",
    "_GNU_SOURCE",
    "ACPI_LIBRARY",
  ]
  config_header = rebase_path("include/onyx/config.h")

  cflags = [
    "-imacros",
    "$config_header",
    "-ffreestanding",
    "-fbuiltin",
    "-Wall",
    "-Wextra",
    "-fstack-protector-strong",
    "-Wno-unused-parameter",
    "-Wno-unused-function",
    "-Wno-error=frame-address",
    "-Wno-address-of-packed-member",
    "-Wno-error=invalid-offsetof",
    "-fvisibility=protected",
    "-Wno-missing-field-initializers",
    "-Wstrict-aliasing",
    "-fno-pie",
    "-fno-unwind-tables",
    "-fno-asynchronous-unwind-tables",
    "-static",
    "-frecord-gcc-switches",
    "-Wno-error=deprecated-declarations"
  ]

  cflags_cc = [
    "-fno-rtti",
    "-fno-exceptions",
    "-fcheck-new",
  ]

  cflags_c = [ "-std=c11" ]

  if (!is_clang) {
    cflags += [
      "-Wno-format-truncation",
      "-Wshadow-compatible-local",
    ]
  } else {
    cflags += [
      "-Wno-null-pointer-arithmetic",
      "-Wno-unknown-attributes",
      "-Wno-error=unused-private-field",
      "-Wno-missing-braces",
      "-Wno-c99-designator",
    ]
  }

  ldflags = [
    "-fkeep-inline-functions",
    "-Wl,--build-id=none",
    "-nostdlib",
    "-static"
  ]

  libs = []

  if (is_clang) {
    ldflags += [
      "-fno-sanitize-link-runtime",
      "-Wl,-no-pie",
    ]
  } else {
    ldflags += [ "-no-pie" ]
    # TODO: Fix this
    # We need to add crt{begin, end}S.o to the command line, with correct ordering
    # I'm not sure if GN lets us pick the ordering, but it would help a lot considering
    # crti/n and crtbegin/end all have their weird section ordering issues (this is all insane!)
    # A decent idea is to completely discard legacy _init() and use init_array exclusively (which requires us to
    # touch the toolchain build, to force --enable-init-fini-array since it defaults to no under cross compilation).
    libs += [ "gcc" ]
  }

  configs = [
    "arch/${target_cpu}:arch_config",
    ":kernel_headers",
  ]

  if (CONFIG_KASAN) {
    configs += [ ":asan_config" ]
  }

  if (CONFIG_UBSAN) {
    configs += [ ":ubsan_config" ]
  }

  asmflags = cflags
}

config("werror_config") {
  cflags = [ "-Werror" ]
}

config("asan_config") {
  cflags = [ "-fsanitize=address" ]

  # fsanitize arguments (may) need to be passed to the linker
  # at least they're always passed in userland builds
  ldflags = cflags

  # Fun stuff I disabled
  # TODO: Remove -asan-instrumentation-with-call-threshold=0 when ASAN is able to be inlined
  if (is_clang) {
    cflags += [
      "-mllvm",
      "-asan-instrumentation-with-call-threshold=0",
      "-mllvm",
      "-asan-globals-live-support=false",
    ]
    cflags += [
      "-mllvm",
      "-asan-stack=0",
      "-mllvm",
      "-asan-globals=0",
    ]
  } else {
    cflags += [
      "--param",
      "asan-globals=0",
      "--param",
      "asan-instrumentation-with-call-threshold=0",
      "--param",
      "asan-stack=0",
      "--param",
      "asan-globals=0",
    ]
  }
}

config("ubsan-config") {
  cflags = [
    "-fsanitize=undefined",
    "-fno-sanitize=alignment",
    "-fno-sanitize=pointer-overflow",
  ]
  ldflags = cflags
}

executable("vmonyx") {
  configs += [ ":kernel_config" ]

  linker_script = rebase_path("arch/${target_cpu}/linker.ld")
  inputs = [ linker_script ]

  ldflags = [
    "-Wl,-T",
    linker_script,
  ]

  deps = [
    "acpica",
    "arch/${target_cpu}:arch_sources",
    "drivers",
    "kernel",
  ]

  deps += [ "lib/libk:k" ]
}

group("kernel") {
  deps = [ ":vmonyx" ]
}

}
else
{

group("kernel") {
  deps = [ ":vmonyx(:${target_cpu}-kernel_toolchain)" ]
}

sdk_resource("headers") {
  sources = [
"include/onyx/public/handle.h",
"include/onyx/public/power_management.h",
"include/onyx/public/cred.h",
"include/onyx/public/netkernel.h",
"include/onyx/public/socket.h",
"include/onyx/public/process.h",
"include/onyx/public/memstat.h",
"include/onyx/public/icmp.h",
]

  outputs = ["usr/include/onyx/public/{{source_file_part}}"]
}

}
