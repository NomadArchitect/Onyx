# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-toolchain-linux:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"

      - name: Cache
        id: toolchain-cache-linux
        uses: actions/cache@v2.1.4
        with:
          # A list of files, directories, and wildcard patterns to cache and restore
          path: toolchain_binaries/
          # An explicit key for restoring and saving the cache
          key: toolchain-linux-${{ hashFiles('toolchains/binutils-2.35.patch toolchains/gcc-10.2.0.patch') }}
      
      - name: Build toolchain
        if: steps.toolchain-cache-linux.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update && sudo apt-get install libmpc-dev libgmp3-dev bison flex libmpfr-dev zstd
          cp kernel/kernel.config.example kernel/kernel.config
          curl -O https://storage.googleapis.com/onyx-stuffs/minimal-sysroot.tar.zst
          zstd -d minimal-sysroot.tar.zst -c | tar xvf -
          mkdir gn_bin/
          cd gn_bin
          wget -q https://chrome-infra-packages.appspot.com/dl/gn/gn/linux-amd64/+/latest -O gn.zip
          unzip gn.zip
          echo "$PWD" >> $GITHUB_PATH
          cd ..
          SYSROOT=$PWD/sysroot ./scripts/setup_build.sh
          make install-headers -j $(nproc)
          mkdir toolchain_binaries
          ./toolchains/download_and_patch_tools.sh toolchain_build
          cd toolchain_build
          mkdir binutils-build
          cd binutils-build
          ../binutils-2.35/configure --target=x86_64-onyx --prefix=$PWD/../../toolchain_binaries \
          --with-sysroot=$PWD/../../sysroot \
          --disable-werror --disable-nls --enable-gold=default --enable-lto --enable-plugins
           make -j $(nproc)
           make install -j $(nproc)
           cd ..
           mkdir gcc-build
           cd gcc-build
           ../gcc-10.2.0/configure --target=x86_64-onyx --prefix=$PWD/../../toolchain_binaries \
           --with-sysroot=$PWD/../../sysroot --enable-languages=c,c++ --disable-nls \
           --enable-threads=posix --enable-libstdcxx-threads --enable-symvers=gnu --enable-default-pie \
           --enable-lto --enable-default-ssp --enable-shared
            make all-gcc all-target-libgcc all-target-libstdc++-v3 -j $(nproc)
            make install-gcc install-target-libgcc install-target-libstdc++-v3 -j $(nproc)
            make clean -j $(nproc)

      - name: Compress toolchain
        run: |
          mv toolchain_binaries x86_64-onyx
          tar cvf x86_64-onyx-linux.tar x86_64-onyx
          zstd -T0 -13 x86_64-onyx-linux.tar -o x86_64-onyx-linux.tar.zst
          mv x86_64-onyx toolchain_binaries

      - name: Upload a Build Artifact (x86_64-onyx-linux)
        uses: actions/upload-artifact@v2.1.4
        with:
          name: x86_64-onyx-linux
          path: x86_64-onyx-linux.tar.zst

  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: build-toolchain-linux
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"
        

      # Runs a single command using the runners shell
      - name: Download the x86_64-onyx-linux toolchain
        uses: actions/download-artifact@v2.0.8
        with:
          # Artifact name
          name: x86_64-onyx-linux

      - name: Extract Toolchain
        run: |
          zstd -d x86_64-onyx-linux.tar.zst --stdout | tar x
          echo "$PWD/x86_64-onyx/bin" >> $GITHUB_PATH
  
      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install mtools genisoimage libfl2 clang-tidy unzip ninja-build
          mkdir gn_bin/
          cd gn_bin
          wget -q https://chrome-infra-packages.appspot.com/dl/gn/gn/linux-amd64/+/latest -O gn.zip
          unzip gn.zip
          echo "$PWD" >> $GITHUB_PATH
          cd ..

      # Runs a set of commands using the runners shell
      - name: Build Onyx
        run: |
          cp kernel/kernel.config.example kernel/kernel.config
          SYSROOT=$PWD/sysroot ./scripts/setup_build.sh
          RUN_CLANG_TIDY=0 make -j $(nproc) iso

      - name: Upload a Build Artifact(Onyx.iso)
        uses: actions/upload-artifact@v2.1.4
        with:
          name: Onyx ISO
          path: Onyx.iso

      - name: Upload a Build Artifact(kernel/vmonyx)
        uses: actions/upload-artifact@v2.1.4
        with:
          name: vmonyx
          path: kernel/vmonyx

      - name: Upload a Build Artifact(sysroot)
        uses: actions/upload-artifact@v2.1.4
        with:
          name: Sysroot
          path: sysroot/
    
  build-toolchain-macos:
      # The type of runner that the job will run on
      runs-on: macos-latest

      # Steps represent a sequence of tasks that will be executed as part of the job
      steps:
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        - uses: actions/checkout@v2
          with:
            submodules: "recursive"

        - name: Cache
          id: toolchain-cache-macos
          uses: actions/cache@v2.1.4
          with:
            # A list of files, directories, and wildcard patterns to cache and restore
            path: toolchain_binaries/
            # An explicit key for restoring and saving the cache
            key: toolchain-macos-${{ hashFiles('toolchains/binutils-2.35.patch toolchains/gcc-10.2.0.patch') }}
      
        - name: Build toolchain
          if: steps.toolchain-cache-macos.outputs.cache-hit != 'true'
          run: |
            brew install zstd gmp mpfr libmpc wget unzip make ninja coreutils
            cp kernel/kernel.config.example kernel/kernel.config
            curl -O https://storage.googleapis.com/onyx-stuffs/minimal-sysroot.tar.zst
            zstd -d minimal-sysroot.tar.zst -c | tar xvf -
            mkdir gn_bin/
            cd gn_bin
            wget -q https://chrome-infra-packages.appspot.com/dl/gn/gn/mac-amd64/+/latest -O gn.zip
            unzip gn.zip
            echo $PATH
            PATH="$PWD:$PATH"
            PATH="$(brew --prefix)/opt/coreutils/libexec/gnubin:$(brew --prefix)/opt/make/libexec/gnubin:$PATH"
            echo "TEST: $PATH"
            cd ..
            SYSROOT=$PWD/sysroot ./scripts/setup_build.sh
            make install-headers -j $(sysctl -n hw.logicalcpu)
            mkdir toolchain_binaries
            ./toolchains/download_and_patch_tools.sh toolchain_build
            cd toolchain_build
            mkdir binutils-build
            cd binutils-build
            ../binutils-2.35/configure --target=x86_64-onyx --prefix=$PWD/../../toolchain_binaries \
            --with-sysroot=$PWD/../../sysroot \
            --disable-werror --disable-nls --disable-gold --enable-lto --enable-plugins
            make -j $(sysctl -n hw.logicalcpu)
            make install -j $(sysctl -n hw.logicalcpu)
            cd ..
            mkdir gcc-build
            cd gcc-build
            ../gcc-10.2.0/configure --target=x86_64-onyx --prefix=$PWD/../../toolchain_binaries \
            --with-sysroot=$PWD/../../sysroot --enable-languages=c,c++ --disable-nls \
            --enable-threads=posix --enable-libstdcxx-threads --enable-symvers=gnu --enable-default-pie \
            --enable-lto --enable-default-ssp --enable-shared
            make all-gcc all-target-libgcc all-target-libstdc++-v3 -j $(sysctl -n hw.logicalcpu)
            make install-gcc install-target-libgcc install-target-libstdc++-v3 -j $(sysctl -n hw.logicalcpu)
            make clean -j $(sysctl -n hw.logicalcpu)

        - name: Compress toolchain
          run: |
            mv toolchain_binaries x86_64-onyx
            tar cvf x86_64-onyx-macos.tar x86_64-onyx
            zstd -T0 -13 x86_64-onyx-macos.tar -o x86_64-onyx-macos.tar.zst
            mv x86_64-onyx toolchain_binaries

        - name: Upload a Build Artifact (x86_64-onyx-macos)
          uses: actions/upload-artifact@v2.1.4
          with:
            name: x86_64-onyx-macos
            path: x86_64-onyx-macos.tar.zst
  build-toolchain-llvm-linux:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"

      - name: Cache
        id: toolchain-cache-linux-llvm
        uses: actions/cache@v2.1.4
        with:
          # A list of files, directories, and wildcard patterns to cache and restore
          path: toolchain_binaries/
          # An explicit key for restoring and saving the cache
          key: toolchain-linux-llvm--${{ hashFiles('toolchains/llvm-project-11.0.0.patch') }}
      
      - name: Build toolchain
        if: steps.toolchain-cache-linux-llvm.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update && sudo apt-get install libmpc-dev libgmp3-dev bison flex libmpfr-dev zstd ninja-build clang lld
          cp kernel/kernel.config.example kernel/kernel.config
          curl -O https://storage.googleapis.com/onyx-stuffs/minimal-sysroot.tar.zst
          zstd -d minimal-sysroot.tar.zst -c | tar xvf -
          mkdir gn_bin/
          cd gn_bin
          wget -q https://chrome-infra-packages.appspot.com/dl/gn/gn/linux-amd64/+/latest -O gn.zip
          unzip gn.zip
          echo "$PWD" >> $GITHUB_PATH
          cd ..
          SYSROOT=$PWD/sysroot ./scripts/setup_build.sh
          make install-headers -j $(nproc)
          mkdir toolchain_binaries
          ./toolchains/download_patch_llvm.sh toolchain_build
          
          LLVM_SRCDIR="$PWD/toolchain_build/llvm-project-11.0.0"
          ONYX_SRCDIR="$PWD"
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DLLVM_LINK_LLVM_DYLIB=ON \
          -DCLANG_LINK_CLANG_DYLIB=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_LTO=OFF \
          -DCMAKE_C_COMPILER=clang \
          -DCMAKE_CXX_COMPILER=clang++ \
          -DCMAKE_ASM_COMPILER=clang \
          -DLINUX_x86_64-unknown-linux-gnu_SYSROOT=/ \
          -DONYX_SRCDIR=$ONYX_SRCDIR -DCMAKE_INSTALL_PREFIX= -C ${LLVM_SRCDIR}/clang/cmake/caches/Onyx-stage2.cmake ${LLVM_SRCDIR}/llvm

          ninja distribution
          DESTDIR=$TOOLCHAIN_DEST ninja install

      - name: Compress toolchain
        run: |
          mv toolchain_binaries onyx-llvm
          tar cvf onyx-linux-llvm.tar onyx-llvm
          zstd -T0 -13 onyx-linux-llvm.tar -o onyx-linux-llvm.tar.zst
          mv onyx-llvm toolchain_binaries

      - name: Upload a Build Artifact (onyx-linux-llvm)
        uses: actions/upload-artifact@v2.1.4
        with:
          name: onyx-linux-llvm
          path: onyx-linux-llvm.tar.zst
    
  build-toolchain-llvm-macos:
    # The type of runner that the job will run on
    runs-on: macos-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"

      - name: Cache
        id: toolchain-cache-macos-llvm
        uses: actions/cache@v2.1.4
        with:
          # A list of files, directories, and wildcard patterns to cache and restore
          path: toolchain_binaries/
          # An explicit key for restoring and saving the cache
          key: toolchain-macos-llvm--${{ hashFiles('toolchains/llvm-project-11.0.0.patch') }}
      
      - name: Build toolchain
        if: steps.toolchain-cache-macos-llvm.outputs.cache-hit != 'true'
        run: |
          brew install zstd gmp mpfr libmpc wget unzip make ninja coreutils llvm
          cp kernel/kernel.config.example kernel/kernel.config
          curl -O https://storage.googleapis.com/onyx-stuffs/minimal-sysroot.tar.zst
          zstd -d minimal-sysroot.tar.zst -c | tar xvf -
          mkdir gn_bin/
          cd gn_bin
          wget -q https://chrome-infra-packages.appspot.com/dl/gn/gn/mac-amd64/+/latest -O gn.zip
          unzip gn.zip
          echo $PATH
          PATH="$PWD:$PATH"
          PATH="$(brew --prefix)/opt/coreutils/libexec/gnubin:$(brew --prefix)/opt/make/libexec/gnubin:$PATH"
          echo "TEST: $PATH"
          cd ..
          SYSROOT=$PWD/sysroot ./scripts/setup_build.sh
          make install-headers -j $(sysctl -n hw.logicalcpu)
          mkdir toolchain_binaries
          ./toolchains/download_patch_llvm.sh toolchain_build
          
          LLVM_SRCDIR="$PWD/toolchain_build/llvm-project-11.0.0"
          ONYX_SRCDIR="$PWD"
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DLLVM_LINK_LLVM_DYLIB=ON \
          -DCLANG_LINK_CLANG_DYLIB=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_LTO=OFF \
          -DCMAKE_C_COMPILER=clang \
          -DCMAKE_CXX_COMPILER=clang++ \
          -DCMAKE_ASM_COMPILER=clang \
          -DLINUX_x86_64-unknown-linux-gnu_SYSROOT=/ \
          -DONYX_SRCDIR=$ONYX_SRCDIR -DCMAKE_INSTALL_PREFIX= -C ${LLVM_SRCDIR}/clang/cmake/caches/Onyx-stage2.cmake ${LLVM_SRCDIR}/llvm
          ninja distribution
          DESTDIR=$TOOLCHAIN_DEST ninja install

      - name: Compress toolchain
        run: |
          mv toolchain_binaries onyx-llvm
          tar cvf onyx-macos-llvm.tar onyx-llvm
          zstd -T0 -13 onyx-macos-llvm.tar -o onyx-macos-llvm.tar.zst
          mv onyx-llvm toolchain_binaries

      - name: Upload a Build Artifact (onyx-macos-llvm)
        uses: actions/upload-artifact@v2.1.4
        with:
          name: onyx-macos-llvm
          path: onyx-macos-llvm.tar.zst
            
